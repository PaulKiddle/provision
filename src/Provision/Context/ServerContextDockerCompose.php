<?php

namespace Aegir\Provision\Context;

use Aegir\Provision\Provision;
use Aegir\Provision\Service\DockerServiceInterface;
use Psr\Log\LogLevel;
use Symfony\Component\Yaml\Yaml;

/**
 * Class ServerContextLocal
 *
 * @package Aegir\Provision\Context
 */
class ServerContextDockerCompose extends ServerContext {

    const DOCKER_COMPOSE_UP_COMMAND = 'docker-compose up -d --build --force-recreate';

    public function preVerify() {
        $tasks = parent::preVerify();
        $filename = $this->getProperty('server_config_path') . DIRECTORY_SEPARATOR . 'docker-compose.yml';

        // Write docker-compose.yml file.
        $tasks['docker.compose.write'] = Provision::newTask()
            ->start('SERVER Generating docker-compose.yml file...')
            ->success('Generating docker-compose.yml file... Saved to ' . $filename)
            ->failure('Generating docker-compose.yml file... Saved to ' . $filename)
            ->execute(function () use ($filename) {

                // Load docker compose data from each docker service.
                $compose_services = [];
                foreach ($this->getServices() as $type => $service) {
                    if ($service instanceof DockerServiceInterface) {
                        $compose_services[$type] = $service->dockerComposeService();
                        $compose_services[$type]['hostname'] = $this->name . '.' . $type;
                    }
                }

                // If there are any docker services in this server create a
                // docker-compose file.
                $compose = array(
                    'version' => '2',
                    'services' => $compose_services,
                );

                $filename = $this->getProperty('server_config_path') . DIRECTORY_SEPARATOR . 'docker-compose.yml';
                $server_name = $this->name;
                $yml_prefix = <<<YML
# Provision Docker Compose File
# =============================
# Server: $server_name
#
# $filename
# 
# DO NOT EDIT THIS FILE.
# This file was automatically generated by Provision CLI.
#
# To re-generate this file, run the command:
#
#    provision verify $server_name
#
# Soon there will be an easy way for you to modify this file automatically.
# THANKS!

YML;
                $yml_dump = $yml_prefix . Yaml::dump($compose, 5, 2);
                $debug_message = 'Generated Docker Compose file: ' . PHP_EOL . $yml_dump;
                $this->getProvision()->getTasks()->taskLog($debug_message, LogLevel::INFO)->run()->getExitCode();

                Provision::fs()->dumpFile($filename, $yml_dump);
            });


        return $tasks;
    }

    /**
     * @return array
     */
    public function postVerify() {

        // Run docker-compose up -d --build
        $command = self::DOCKER_COMPOSE_UP_COMMAND;
        $tasks['docker.compose.up'] = Provision::newTask()
            ->start("Running <info>{$command}</info> in <info>{$this->server_config_path}</info> ...")
            ->execute(function() {
                return $this->shell_exec(self::DOCKER_COMPOSE_UP_COMMAND, NULL, 'exit');
            })
        ;

        return $tasks;
    }

}